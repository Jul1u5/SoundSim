.TH "main.c" 3 "Wed Sep 30 2015" "SoundSim" \" -*- nroff -*-
.ad l
.nh
.SH NAME
main.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdbool\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'main\&.h'\fP
.br
\fC#include 'soundwavefunction\&.h'\fP
.br
\fC#include 'collision\&.h'\fP
.br
\fC#include 'extras\&.h'\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <signal\&.h>\fP
.br
\fC#include <mpi\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBitem_node\fP *** \fBcreateRoom\fP ()"
.br
.ti -1c
.RI "void \fBallocRoom\fP ()"
.br
.ti -1c
.RI "\fBitem_node\fP *** \fBcreateRoomNew\fP ()"
.br
.ti -1c
.RI "void \fBchangeRoom\fP (\fBitem_node\fP ***newRoom)"
.br
.ti -1c
.RI "int \fBgetItemID\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "void \fBsetItemID\fP (\fBitem_node\fP *node, int id)"
.br
.ti -1c
.RI "int \fBgetFieldID\fP (int x, int y, int z)"
.br
.ti -1c
.RI "\fBitem_node\fP \fBgetRoom\fP ()"
.br
.ti -1c
.RI "bool \fBisObstacle\fP (int x, int y, int z)"
.br
.ti -1c
.RI "void \fBsetFreq20b40\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq40b100\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq100b150\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq150b400\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq400b1000\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq1000b2000\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq2000b3500\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq3500b6000\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq6000b10000\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "void \fBsetFreq10000b20000\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "int \fBgetFreq20b40\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq40b100\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq100b150\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq150b400\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq400b1000\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq1000b2000\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq2000b3500\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq3500b6000\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq6000b10000\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetFreq10000b20000\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "void \fBsetDirectionID\fP (\fBitem_node\fP *node, int value)"
.br
.ti -1c
.RI "int \fBgetDirectionID\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "int \fBgetReboundID\fP (int currentDirectionID)"
.br
.ti -1c
.RI "\fBitem_node\fP \fBgetSound\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "\fBitem_node\fP \fBgetObstacle\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBgetItem_Root\fP (int x, int y, int z)"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBcreateItem\fP (int x, int y, int z, int id)"
.br
.ti -1c
.RI "void \fBremoveItem\fP (\fBitem_node\fP *node)"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBaddItem\fP (\fBitem_node\fP *node, int x, int y, int z)"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBgetItem_RootNewRoom\fP (int x, int y, int z)"
.br
.ti -1c
.RI "void \fBaddItemNewRoom\fP (\fBitem_node\fP *node, int x, int y, int z)"
.br
.ti -1c
.RI "int \fBisSoundField\fP (int x, int y, int z)"
.br
.ti -1c
.RI "void \fBcreateReceipt\fP (int(*\fBroomtrans\fP)[\fBcols\fP], int var, int x)"
.br
.ti -1c
.RI "int * \fBprepareArrays\fP (\fBitem_node\fP *node, int side)"
.br
.ti -1c
.RI "void \fBsaveVisualisation\fP (int x_offset)"
.br
.ti -1c
.RI "void \fBstartup\fP ()"
.br
.ti -1c
.RI "void \fBshutdown\fP ()"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBvisuStep\fP = 1"
.br
.RI "\fIStep Counter für Visualisierung\&. \fP"
.ti -1c
.RI "int \fBx_format\fP"
.br
.RI "\fIRaum Formate\&. \fP"
.ti -1c
.RI "int \fBy_format\fP"
.br
.ti -1c
.RI "int \fBz_format\fP"
.br
.ti -1c
.RI "int \fBj\fP"
.br
.ti -1c
.RI "int \fBk\fP"
.br
.ti -1c
.RI "int \fBl\fP"
.br
.ti -1c
.RI "int \fBi\fP"
.br
.ti -1c
.RI "int \fBmyrank\fP"
.br
.ti -1c
.RI "int \fBsize\fP"
.br
.ti -1c
.RI "const int \fBnitems\fP = 18"
.br
.ti -1c
.RI "int \fBrows\fP = 5"
.br
.ti -1c
.RI "int \fBrealcountright\fP = 0"
.br
.ti -1c
.RI "int \fBrealcountleft\fP = 0"
.br
.ti -1c
.RI "int \fBcols\fP = 18"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBroomtrans\fP"
.br
.RI "\fIModelierung eines Fragments ! \fP"
.ti -1c
.RI "\fBitem_node\fP *** \fBroom\fP"
.br
.ti -1c
.RI "\fBitem_node\fP *** \fBroom_new\fP"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBallElementsNew\fP = NULL"
.br
.ti -1c
.RI "\fBitem_node\fP * \fBallElements\fP = NULL"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBitem_node\fP* addItem (\fBitem_node\fP * node, int x, int y, int z)"
Fügt ein Element an eine neue Stelle (Eigenschaften bleiben erhalten), Element an der alten Position wird entfernt 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.br
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 556 of file main\&.c\&.
.PP
References getItem_Root(), getItemID(), item_node::next, item_node::prev, and removeItem()\&.
.SS "void addItemNewRoom (\fBitem_node\fP * node, int x, int y, int z)"
Fügt ein Element an eine neue Stelle in new_room (Eigenschaften bleiben erhalten), Element an der alten Position wird entfernt 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.br
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP

.PP
Definition at line 599 of file main\&.c\&.
.PP
References getItem_RootNewRoom(), getItemID(), item_node::next, item_node::prev, and removeItem()\&.
.PP
Referenced by main(), procedure(), and procedureH()\&.
.SS "void allocRoom ()"
Allocation Test 
.PP
Definition at line 77 of file main\&.c\&.
.PP
References i, j, x_format, y_format, and z_format\&.
.SS "void changeRoom (\fBitem_node\fP *** newRoom)"
Raum wird gewechselt\&. Der Alte wird geleert\&. 
.PP
\fBParameters:\fP
.RS 4
\fInewRoom\fP 
.RE
.PP

.PP
Definition at line 173 of file main\&.c\&.
.PP
References allElementsNew, i, and x_format\&.
.PP
Referenced by main()\&.
.SS "\fBitem_node\fP* createItem (int x, int y, int z, int id)"
Erzeugt ein neues Item mit einer bestimmten ID 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.br
\fIid\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 487 of file main\&.c\&.
.PP
References getItem_Root(), getItemID(), item_node::id, item_node::next, item_node::prev, and setMovement()\&.
.PP
Referenced by box(), createReceipt(), createWall(), door(), interference(), loudspeaker(), main(), procedure(), and procedureH()\&.
.SS "void createReceipt (int(*) roomtrans[cols], int var, int x)"

.PP
Definition at line 640 of file main\&.c\&.
.PP
References absorption(), createItem(), getReboundID(), isSoundField(), setDirectionID(), setFreq10000b20000(), setFreq1000b2000(), setFreq100b150(), setFreq150b400(), setFreq2000b3500(), setFreq20b40(), setFreq3500b6000(), setFreq400b1000(), setFreq40b100(), setFreq6000b10000(), setMovement(), setSideOfWave(), and setTouche()\&.
.PP
Referenced by main()\&.
.SS "\fBitem_node\fP*** createRoom ()"
Erzeugt einen neuen Raum 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 41 of file main\&.c\&.
.PP
References i, item_node::id, j, k, l, item_node::next, room, x_format, y_format, and z_format\&.
.PP
Referenced by main()\&.
.SS "\fBitem_node\fP*** createRoomNew ()"
Erzeugt einen neuen Raum, in den die neuen Elemente gepackt werden\&. 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 105 of file main\&.c\&.
.PP
References i, item_node::id, j, k, l, item_node::next, room_new, x_format, y_format, and z_format\&.
.PP
Referenced by main()\&.
.SS "int getDirectionID (\fBitem_node\fP * node)"
Gibt die Richtung eine SoundItem 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Richtung 
.RE
.PP

.PP
Definition at line 421 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by addWave(), checkSoundValid(), interference(), main(), prepareArrays(), procedure(), and procedureH()\&.
.SS "int getFieldID (int x, int y, int z)"
Gibt die allgemeine Feld ID zurück\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0: Sound, 1: Hinderniss, 2: ungültiges Element, 3: leeres Feld (Linked List Head) 
.RE
.PP

.PP
Definition at line 218 of file main\&.c\&.
.PP
References item_node::id, item_node::next, x_format, and y_format\&.
.PP
Referenced by main()\&.
.SS "int getFreq10000b20000 (\fBitem_node\fP * node)"

.PP
Definition at line 395 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq1000b2000 (\fBitem_node\fP * node)"

.PP
Definition at line 363 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq100b150 (\fBitem_node\fP * node)"

.PP
Definition at line 339 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq150b400 (\fBitem_node\fP * node)"

.PP
Definition at line 347 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), saveVisualisation(), and setFreqAll()\&.
.SS "int getFreq2000b3500 (\fBitem_node\fP * node)"

.PP
Definition at line 371 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq20b40 (\fBitem_node\fP * node)"

.PP
Definition at line 323 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq3500b6000 (\fBitem_node\fP * node)"

.PP
Definition at line 379 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq400b1000 (\fBitem_node\fP * node)"

.PP
Definition at line 355 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq40b100 (\fBitem_node\fP * node)"

.PP
Definition at line 331 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "int getFreq6000b10000 (\fBitem_node\fP * node)"

.PP
Definition at line 387 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), checkSoundValid(), decSoundWithMovement(), interference(), prepareArrays(), and setFreqAll()\&.
.SS "\fBitem_node\fP* getItem_Root (int x, int y, int z)"
Das Root Element ist das 1\&.Element jeder gültigen Koordinate (ID 3) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 465 of file main\&.c\&.
.PP
References item_node::id, item_node::next, x_format, and y_format\&.
.PP
Referenced by addItem(), createItem(), interference(), main(), saveVisualisation(), and unToucheAll()\&.
.SS "\fBitem_node\fP* getItem_RootNewRoom (int x, int y, int z)"
Das Root Element von new_room ist das 1\&.Element jeder gültigen Koordinate (ID 3) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 579 of file main\&.c\&.
.PP
References item_node::id, item_node::next, x_format, and y_format\&.
.PP
Referenced by addItemNewRoom()\&.
.SS "int getItemID (\fBitem_node\fP * node)"
Gibt die ITEM ID zurück\&. 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0: Sound, 1: Hinderniss, 2: ungültiges Element 
.RE
.PP

.PP
Definition at line 196 of file main\&.c\&.
.PP
References item_node::id\&.
.PP
Referenced by addItem(), addItemNewRoom(), addWave(), checkSoundValid(), copyMovement(), createItem(), decSoundWithMovement(), getDirectionID(), getFreq10000b20000(), getFreq1000b2000(), getFreq100b150(), getFreq150b400(), getFreq2000b3500(), getFreq20b40(), getFreq3500b6000(), getFreq400b1000(), getFreq40b100(), getFreq6000b10000(), getMovement(), getSideOfWave(), getTouch(), getWaveRoot(), increaseMovement(), interference(), prepareArrays(), saveVisualisation(), setDirectionID(), setFreq10000b20000(), setFreq1000b2000(), setFreq100b150(), setFreq150b400(), setFreq2000b3500(), setFreq20b40(), setFreq3500b6000(), setFreq400b1000(), setFreq40b100(), setFreq6000b10000(), setMovement(), setSideOfWave(), setTouche(), setWaveRoot(), testGetItemID(), unTouche(), and unToucheAll()\&.
.SS "\fBitem_node\fP getObstacle (\fBitem_node\fP * node)"

.PP
Definition at line 453 of file main\&.c\&.
.SS "int getReboundID (int currentDirectionID)"
Gibt die Abprallrichtung abhängig von der aktuellen Richtung 
.PP
\fBParameters:\fP
.RS 4
\fIcurrentDirectionID\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
neue Richtung 
.RE
.PP

.PP
Definition at line 432 of file main\&.c\&.
.PP
Referenced by createReceipt(), and main()\&.
.SS "\fBitem_node\fP getRoom ()"
Variable room als Getter\&. 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 237 of file main\&.c\&.
.PP
References room\&.
.SS "\fBitem_node\fP getSound (\fBitem_node\fP * node)"

.PP
Definition at line 448 of file main\&.c\&.
.SS "bool isObstacle (int x, int y, int z)"
Wahrheitswert ob es sich bei der Koordinate um ein Hinderniss handelt\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 247 of file main\&.c\&.
.PP
References item_node::id\&.
.PP
Referenced by main(), and saveVisualisation()\&.
.SS "int isSoundField (int x, int y, int z)"
Prüft ob Feld ein Sound Feld ist 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.br
\fIz\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 622 of file main\&.c\&.
.PP
References item_node::id, x_format, and y_format\&.
.PP
Referenced by addWave(), and createReceipt()\&.
.SS "int main (int argc, char * argv[])"
Gesamtformat
.PP
Taktgeber 
.PP
Definition at line 827 of file main\&.c\&.
.PP
References absorption(), addItemNewRoom(), addWave(), changeReboundSideOfWave(), changeRoom(), checkSoundValid(), cols, createReceipt(), createRoom(), createRoomNew(), item_node::data, decSoundWithMovement(), getDirectionID(), getFieldID(), getItem_Root(), getReboundID(), getTouch(), i, increaseMovement(), interference(), isObstacle(), j, k, l, loudspeaker(), myrank, item_node::next, prepareArrays(), realcountleft, realcountright, removeItem(), saveVisualisation(), size, item_node::Sound, unToucheAll(), x_format, y_format, and z_format\&.
.SS "int* prepareArrays (\fBitem_node\fP * node, int side)"

.PP
Definition at line 681 of file main\&.c\&.
.PP
References cols, getDirectionID(), getFreq10000b20000(), getFreq1000b2000(), getFreq100b150(), getFreq150b400(), getFreq2000b3500(), getFreq20b40(), getFreq3500b6000(), getFreq400b1000(), getFreq40b100(), getFreq6000b10000(), getItemID(), getMovement(), getSideOfWave(), getTouch(), j, k, and l\&.
.PP
Referenced by main()\&.
.SS "void removeItem (\fBitem_node\fP * node)"
Entfernt das ausgewählte Element 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.RE
.PP

.PP
Definition at line 532 of file main\&.c\&.
.PP
References item_node::next, and item_node::prev\&.
.PP
Referenced by addItem(), addItemNewRoom(), checkSoundValid(), and main()\&.
.SS "void saveVisualisation (int x_offset)"
Speichert die Matrix ab\&. Zeitschritte werden berücksichtigt\&. 
.PP
\fBSee also:\fP
.RS 4
http://wiki.selfhtml.org/wiki/JavaScript/JSON
.PP
http://papo15.juliu5.com/ 
.RE
.PP

.PP
Definition at line 730 of file main\&.c\&.
.PP
References cols, getFreq150b400(), getItem_Root(), getItemID(), isObstacle(), j, k, l, myrank, item_node::next, rows, x_format, y_format, and z_format\&.
.PP
Referenced by main()\&.
.SS "void setDirectionID (\fBitem_node\fP * node, int value)"
Richtung eines SoundItem setzen 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.br
\fIvalue\fP 
.RE
.PP

.PP
Definition at line 410 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by createReceipt(), interference(), loudspeaker(), main(), procedure(), and procedureH()\&.
.SS "void setFreq10000b20000 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 315 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq1000b2000 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 291 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq100b150 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 273 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq150b400 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 279 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq2000b3500 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 297 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq20b40 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 261 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq3500b6000 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 303 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq400b1000 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 285 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq40b100 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 267 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setFreq6000b10000 (\fBitem_node\fP * node, int value)"

.PP
Definition at line 309 of file main\&.c\&.
.PP
References item_node::data, getItemID(), and item_node::Sound\&.
.PP
Referenced by absorption(), createReceipt(), decSoundWithMovement(), interference(), loudspeaker(), main(), and setFreqAll()\&.
.SS "void setItemID (\fBitem_node\fP * node, int id)"
Gibt einem ITEM die ID 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.br
\fIid\fP 
.RE
.PP

.PP
Definition at line 207 of file main\&.c\&.
.PP
References item_node::id\&.
.SS "void shutdown ()"
Verantwortlich für das korrekte herunterfahren 
.PP
Definition at line 815 of file main\&.c\&.
.SS "void startup ()"
Wird zu Beginn aufgerufen und organisiert den Start 
.PP
Definition at line 799 of file main\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBitem_node\fP* allElements = NULL"

.PP
Definition at line 35 of file main\&.c\&.
.SS "\fBitem_node\fP* allElementsNew = NULL"

.PP
Definition at line 34 of file main\&.c\&.
.PP
Referenced by changeRoom()\&.
.SS "int cols = 18"

.PP
Definition at line 29 of file main\&.c\&.
.PP
Referenced by main(), prepareArrays(), and saveVisualisation()\&.
.SS "int i"

.PP
Definition at line 20 of file main\&.c\&.
.PP
Referenced by allocRoom(), box(), changeRoom(), createRoom(), createRoomNew(), createWall(), door(), loudspeaker(), main(), and unToucheAll()\&.
.SS "int j"

.PP
Definition at line 20 of file main\&.c\&.
.PP
Referenced by allocRoom(), box(), createRoom(), createRoomNew(), createWall(), door(), main(), prepareArrays(), and saveVisualisation()\&.
.SS "int k"

.PP
Definition at line 20 of file main\&.c\&.
.PP
Referenced by box(), createRoom(), createRoomNew(), createWall(), door(), main(), prepareArrays(), and saveVisualisation()\&.
.SS "int l"

.PP
Definition at line 20 of file main\&.c\&.
.PP
Referenced by createRoom(), createRoomNew(), main(), prepareArrays(), and saveVisualisation()\&.
.SS "int myrank"
OpenMPI Rank 0: Verwalter V, Rank 1: Visualizer V, Rank 2-n: SoundSim S 
.PP
Definition at line 23 of file main\&.c\&.
.PP
Referenced by main(), and saveVisualisation()\&.
.SS "const int nitems = 18"

.PP
Definition at line 25 of file main\&.c\&.
.SS "int realcountleft = 0"

.PP
Definition at line 28 of file main\&.c\&.
.PP
Referenced by main()\&.
.SS "int realcountright = 0"

.PP
Definition at line 27 of file main\&.c\&.
.PP
Referenced by main()\&.
.SS "\fBitem_node\fP*** room"

.PP
Definition at line 32 of file main\&.c\&.
.PP
Referenced by createRoom(), and getRoom()\&.
.SS "\fBitem_node\fP*** room_new"

.PP
Definition at line 33 of file main\&.c\&.
.PP
Referenced by createRoomNew()\&.
.SS "\fBitem_node\fP* roomtrans"

.PP
Modelierung eines Fragments ! 
.PP
Definition at line 31 of file main\&.c\&.
.SS "int rows = 5"

.PP
Definition at line 26 of file main\&.c\&.
.PP
Referenced by main(), and saveVisualisation()\&.
.SS "int size"

.PP
Definition at line 24 of file main\&.c\&.
.PP
Referenced by main()\&.
.SS "int visuStep = 1"

.PP
Step Counter für Visualisierung\&. 
.PP
Definition at line 15 of file main\&.c\&.
.SS "int x_format"

.PP
Raum Formate\&. 
.PP
Definition at line 17 of file main\&.c\&.
.PP
Referenced by allocRoom(), changeRoom(), createRoom(), createRoomNew(), createWall(), door(), getFieldID(), getItem_Root(), getItem_RootNewRoom(), isSoundField(), main(), saveVisualisation(), and unToucheAll()\&.
.SS "int y_format"

.PP
Definition at line 18 of file main\&.c\&.
.PP
Referenced by allocRoom(), createRoom(), createRoomNew(), createWall(), door(), getFieldID(), getItem_Root(), getItem_RootNewRoom(), isSoundField(), main(), saveVisualisation(), and unToucheAll()\&.
.SS "int z_format"

.PP
Definition at line 19 of file main\&.c\&.
.PP
Referenced by allocRoom(), createRoom(), createRoomNew(), createWall(), door(), main(), saveVisualisation(), and unToucheAll()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SoundSim from the source code\&.
